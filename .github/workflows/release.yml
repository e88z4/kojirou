name: release

on:
  workflow_run:
    workflows: [build]
    types:
      - completed

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create release draft with assets
        uses: actions/github-script@v6
        with:
          script: |
            const run = await github.rest.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });

            // Get version from tag
            const version = run.data.head_branch.replace(/^v/, '');
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: run.data.head_branch,
              target_commitish: run.data.head_sha,
              name: `Release ${version}`,
              draft: true,
              generate_release_notes: true,
            });

            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.data.id,
            });

            for (const artifact of artifacts.data.artifacts) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: "zip",
              });

              // Extract OS and arch from artifact name
              const match = artifact.name.match(/dist-kojirou-(.*?)-(.*)/);
              if (match) {
                const [_, os, arch] = match;
                const ext = os === 'windows' ? '.exe' : '';
                const assetName = `kojirou-${version}-${os}-${arch}${ext}`;

                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  name: assetName,
                  data: download.data,
                  origin: release.data.upload_url,
                });
              }
            }
